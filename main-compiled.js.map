{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["export function TeamSpeakListener() {\r\n  'use strict';\r\n  const TeamSpeakClient = require(\"node-teamspeak\");\r\n  const TelegramBot = require('node-telegram-bot-api');\r\n  const mongoose = require('mongoose');\r\n  const fs = require('fs');\r\n\r\n  const parsedJson = JSON.parse(fs.readFileSync('settings.json', 'utf8'));\r\n  const helpText = \"The following commands are supported: \\n\\n\" +\r\n    \"/help - Show this help.\\n\\n\" +\r\n    \"/start - Initial command to start conversation with the bot.\\n\\n\" +\r\n    \"/stop or /stahp - Omit this command and you'll never hear anything again from the bot. All your subscriptions will be deleted.\\n\\n\" +\r\n    \"/subscribeall - Get notified if any user connects to the TS3 server.\\n\\n\" +\r\n    \"/unsubscribeall - Don't get notified for every user that joins the server. If you subscribed to specific users, you'll keep getting notifications for them.\\n\\n\" +\r\n    \"/subscribe [username] - Get notified if the specified *username* joins the server.\\n\\n\" +\r\n    \"/unsubscribe [username] - Don't get notified if the specified *username* joins the server.\\n\\n\" +\r\n    \"/subscriptions - Show all active subscriptions.\";\r\n\r\n  const server = parsedJson.server;\r\n  const port = parsedJson.port;\r\n  const queryPort = parsedJson.queryPort;\r\n\r\n  const cl = new TeamSpeakClient(server, queryPort);\r\n\r\n  const bot = new TelegramBot(parsedJson.botApiKey, {polling: true});\r\n\r\n  const usersSchema = new mongoose.Schema(\r\n    {\r\n      \"tgUserId\": {type: String, index: true},\r\n      \"notifyAll\": {type: Boolean, default: false},\r\n      \"notifyOnDisconnect\": {type: Boolean, default: false},\r\n      \"tsUserNames\": [String]\r\n    }\r\n  );\r\n  const Users = mongoose.model('Users', usersSchema);\r\n  mongoose.connect(parsedJson.mongooseConnection);\r\n  const db = mongoose.connection;\r\n  db.on('error', console.error.bind(console, 'connection error:'));\r\n\r\n  db.once('open', () => {\r\n    bot.onText(/\\/start/, (msg) => {\r\n      Users.findOneAndUpdate({tgUserId: msg.from.id}, {tgUserId: msg.from.id}, {upsert: true}, (err, result) => {\r\n        if (result) {\r\n          console.log(result);\r\n          bot.sendMessage(msg.from.id, helpText);\r\n        }\r\n        if (err) {\r\n          bot.sendMessage(msg.from.id, 'Failed to register your Telegram account.');\r\n        }\r\n      });\r\n    });\r\n\r\n    bot.onText(/\\/stop|\\/stahp/, (msg) => {\r\n      Users.remove({tgUserId: msg.from.id}, err => {\r\n        if (!err) {\r\n          bot.sendMessage(msg.from.id, 'You\\'ll never hear anything from me again.');\r\n        }\r\n        if (err) {\r\n          bot.sendMessage(msg.from.id, 'Failed to persist in database');\r\n        }\r\n      });\r\n    });\r\n\r\n    \r\n\r\n    bot.onText(/\\/subscribeall/, (msg) => {\r\n      Users.findOneAndUpdate({tgUserId: msg.from.id}, {notifyAll: true}, (err, result) => {\r\n        if (result) {\r\n          bot.sendMessage(msg.from.id, 'You will receive a notification if any user joins the server.');\r\n        }\r\n        if (err) {\r\n          bot.sendMessage(msg.from.id, 'Failed to subscribe.');\r\n        }\r\n      });\r\n    });\r\n\r\n    bot.onText(/\\/unsubscribeall/, (msg) => {\r\n      Users.findOneAndUpdate({tgUserId: msg.from.id}, {notifyAll: false}, (err, result) => {\r\n        if (result) {\r\n          bot.sendMessage(msg.from.id, 'You will only receive notifications for users you specified.');\r\n        }\r\n        if (err) {\r\n          bot.sendMessage(msg.from.id, 'Failed to subscribe.');\r\n        }\r\n      });\r\n    });\r\n\r\n    bot.onText(/\\/subscribe (.+)/, (msg, match) => {\r\n      Users.findOneAndUpdate({tgUserId: msg.from.id}, {$addToSet: {tsUserNames: match[1]}}, (err, result) => {\r\n        if(result) {\r\n          bot.sendMessage(msg.from.id, 'You will receive a notification once ' + match[1] + ' joins the server.');\r\n        }\r\n        if (err) {\r\n          bot.sendMessage(msg.from.id, 'Failed to subscribe.');\r\n        }\r\n      });\r\n    });\r\n\r\n    bot.onText(/\\/subscribe$/, (msg) => {\r\n      bot.sendMessage(msg.from.id, 'Please enter a username for /subscribe.');\r\n    });\r\n\r\n    bot.onText(/\\/unsubscribe (.+)/, (msg, match) => {\r\n      Users.findOneAndUpdate({tgUserId: msg.from.id}, {$pull: {tsUserNames: match[1]}}, (err, result) => {\r\n        if(result) {\r\n          bot.sendMessage(msg.from.id, 'You won\\'t receive a notification once ' + match[1] + ' joins the server.');\r\n        }\r\n        if (err) {\r\n          bot.sendMessage(msg.from.id, 'Failed to unsubscribe.');\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  bot.onText(/\\/unsubscribe$/, (msg) => {\r\n    bot.sendMessage(msg.from.id, 'Please enter a username for /unsubscribe..');\r\n  });\r\n\r\n  bot.onText(/\\/subscriptions/, (msg) => {\r\n    Users.findOne({tgUserId: msg.from.id}, (err, result) => {\r\n      if(result) {\r\n        let subscriptions = \"\";\r\n        result.tsUserNames.forEach((element) => {\r\n          subscriptions = subscriptions + element + \"\\n\";\r\n        });\r\n        if (result.notifyAll) {\r\n          bot.sendMessage(msg.from.id, 'You subscribed to all users.');\r\n        }\r\n        else if (subscriptions) {\r\n          bot.sendMessage(msg.from.id, 'You subscribed to: \\n' + subscriptions);\r\n        } else {\r\n          bot.sendMessage(msg.from.id, 'You don\\'t have any subscription.');\r\n        }\r\n      }\r\n      if (err) {\r\n        bot.sendMessage(msg.from.id, 'Request failed.');\r\n      }\r\n    });\r\n  });\r\n\r\n\r\n  serverNotifyRegister();\r\n  handleClientEnterView();\r\n\r\n  function serverNotifyRegister() {\r\n    cl.send(\"use\", {port: port || 9987}, () => {\r\n      cl.send(\"servernotifyregister\", {event: \"server\"}, () => {\r\n      });\r\n    });\r\n  }\r\n\r\n  function handleClientEnterView() {\r\n    cl.on(\"cliententerview\", (resp) => {\r\n      //noinspection JSUnresolvedVariable\r\n      Users.find({$or: [{tsUserNames: resp.client_nickname}, {notifyAll: true}]}).exec((err, result) => {\r\n        if (err) {\r\n          return;\r\n        } if (result) {\r\n          result.forEach((element) => {\r\n            bot.sendMessage(element.tgUserId, resp.client_nickname + \" joined the server.\");\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\ntry {\r\n  new TeamSpeakListener();\r\n} catch (ex) {\r\n  console.log(\"Restart on error.\");\r\n  new TeamSpeakListener();\r\n}"]}