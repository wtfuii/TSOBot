{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["class TeamSpeakListener {\r\n  constructor(server, port, queryPort) {\r\n    const TeamSpeakClient = require(\"node-teamspeak\");\r\n    this.server = server;\r\n    this.port = port;\r\n    this.queryPort = port;\r\n    this.cl = new TeamSpeakClient(server, queryPort);\r\n    this.serverNotifyRegister();\r\n  }\r\n\r\n  serverNotifyRegister() {\r\n    this.cl.send(\"use\", {port: this.port}, () => {\r\n      this.cl.send(\"servernotifyregister\", {event: \"server\"}, () => {\r\n      });\r\n    });\r\n  }\r\n\r\n  handleClientEnterView(bot, Users) {\r\n    this.cl.on(\"cliententerview\", (resp) => {\r\n      //noinspection JSUnresolvedVariable\r\n      Users.find({$or: [{tsUserNames: resp.client_nickname}, {notifyAll: true}]}, (err, result) => {\r\n        if (result) {\r\n          for (let user in result) {\r\n            if (result.hasOwnProperty(user)) {\r\n              bot.sendMessage(user.tgUserId, \"${resp.client_nickname} joined the server.\");\r\n            }\r\n          }\r\n        } if (err) {\r\n          return;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport class TSOBot {\r\n  constructor() {\r\n    const TelegramBot = require('node-telegram-bot-api');\r\n    const mongoose = require('mongoose');\r\n    const fs = require('fs');\r\n\r\n    const parsedJson = JSON.parse(fs.readFileSync('settings.json', 'utf8'));\r\n\r\n    this.bot = new TelegramBot(parsedJson.botApiKey, {polling: true});\r\n    this.tsListener = new TeamSpeakListener(parsedJson.server, parsedJson.port, parsedJson.queryPort);\r\n\r\n    const usersSchema = new mongoose.Schema(\r\n      {\r\n        \"tgUserId\": {type: String, index: true},\r\n        \"notifyAll\": {type: Boolean, default: false},\r\n        \"notifyOnDisconnect\": {type: Boolean, default: false},\r\n        \"tsUserNames\": [String]\r\n      }\r\n    );\r\n    const Users = mongoose.model('Users', usersSchema);\r\n    mongoose.connect(parsedJson.mongooseConnection);\r\n    const db = mongoose.connection;\r\n    db.on('error', console.error.bind(console, 'connection error:'));\r\n    db.once('open', this.setMessageListeners(Users));\r\n\r\n    this.tsListener.handleClientEnterView(this.bot, Users);\r\n  }\r\n\r\n  setMessageListeners(Users) {\r\n    this.bot.onText(/\\/start/, (msg) => {\r\n      Users.findOneAndUpdate({tgUserId: msg.from.id}, {upsert: true}, (err, result) => {\r\n        if (result) {\r\n          this.bot.sendMessage(msg.from.id, 'Welcome to the TSOBot');\r\n        }\r\n        if (err) {\r\n          this.bot.sendMessage(msg.from.id, 'Failed to Register your Telegram Account.');\r\n        }\r\n      });\r\n    });\r\n\r\n    this.bot.onText(/\\/subscribeall/, (msg) => {\r\n      Users.findOneAndUpdate({TgUserId: msg.from.id}, {\"notifyAll\": true}, (err, result) => {\r\n        if (result) {\r\n          this.bot.sendMessage(msg.from.id, 'You will receive a notification if any user connects to the server.');\r\n        }\r\n        if (err) {\r\n          this.bot.sendMessage(msg.from.id, 'Failed to subscribe.');\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n"]}